println("app start")
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: "kotlin-android-extensions"
//apply plugin: 'kotlin-kapt'

apply plugin: 'realm-android'

apply plugin: 'versionplugin'
//apply plugin: com.hawksjamesf.plugin.VersionPluginForJava
apply plugin: 'versionpluginforjava'
apply plugin: 'versionpluginforkotlin'

apply from: "${rootProject.getRootDir().getAbsolutePath()}/script/util.gradle"

versionPlugin {
    buildTypeMatcher = 'debug'
//        '$appName/project/buildType-v_$versionName-c_$versionCode'
//        fileFormat = '$appName-v_$versionName-c_$versionCode'
    fileFormat = '$project-$appName-$buildType-v_$versionName-c_$versionCode-time_$releaseTime'
}

versionPluginForJava {
    buildTypeMatcher = "debug"
    fileFormat = '$project-$appName-$buildType-v_$versionName-c_$versionCode-time_$releaseTime'
}


versionPluginForKotlin {
    buildTypeMatcher = "debug"
    fileFormat = '$project-$appName-$buildType-v_$versionName-c_$versionCode-time_$releaseTime'
}

def getVersion() {
    [rootProject.ext.minSdkVersion, rootProject.ext.targetSdkVersion, rootProject.ext.versionCode, rootProject.ext.versionName]
}

apply plugin: "com.bmuschko.docker-remote-api"

task exportVarToShell(type: Exec) {
    commandLine "${rootProject.getRootDir().getAbsolutePath()}/script/export_var.sh"
    args "${rootProject.ext.versionName}", "${rootProject.getRootDir().getAbsolutePath()}"
//        args = "VERSION_NAME=${rootProject.ext.versionName}"
//    }
//}
}
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        (minSdkVersion, targetSdkVersion, versionCode, versionName) = getVersion()

        multiDexEnabled = true
//        multiDexKeepFile file('multiDexKeepFile.txt')
        multiDexKeepProguard file('multiDexKeep.pro')
        applicationId "com.hawksjamesf.spacecraft"
        testApplicationId "com.hawksjamesf.spacecraft.test"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
//             设置支持的SO库架构
            abiFilters 'x86_64'
            abiFilters 'x86'
            abiFilters 'armeabi-v7a'
            abiFilters 'arm64-v8a'
        }
//        buildConfigField("String", "WEATHER_URL_XIAO_MI", '"https://weatherapi.market.xiaomi.com"')
//        buildConfigField("String", "WEATHER_URL_CAI_YUN_APP", '"https://api.caiyunapp.com"')
//        buildConfigField('String', 'WEATHER_URL_OPEN_WEATHER_MAP', '"https://api.openweathermap.org"')
        buildConfigField('String', 'BUGLY_APP_ID', '"a5f4e5063e"')
        buildConfigField('String', 'XIAOMI_APP_ID', '"2882303761517883187"')
        buildConfigField('String', 'XIAOMI_APP_KEY', '"5381788364187"')

        //lower 5.x
        vectorDrawables.useSupportLibrary = true
        vectorDrawables.generatedDensities = []
    }

    def releaseKeySet = ['RELEASE_KEY_ALIAS', 'RELEASE_STORE_PASSWORD', 'RELEASE_KEY_PASSWORD']
    def debugKeySet = ['DEBUG_KEY_ALIAS', 'DEBUG_STORE_PASSWORD', 'DEBUG_KEY_PASSWORD']
    signingConfigs {
        debugSigningConfig {
            (keyAlias, keyPassword, storePassword) = getKeyStoreProperties(debugKeySet)
            storeFile file("${rootProject.getRootDir().getAbsolutePath()}/keystore/debug.jks")
            v1SigningEnabled true
            v2SigningEnabled = true

        }
        releaseSigningConfig {
            (keyAlias, keyPassword, storePassword) = getKeyStoreProperties(releaseKeySet)
            storeFile file("${rootProject.getRootDir().getAbsolutePath()}/keystore/release.jks")
            v1SigningEnabled true
            v2SigningEnabled = true
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = ['QQ_KEY': 'adf', 'WEXIN_KEY': 'adfaf']
            signingConfig signingConfigs.releaseSigningConfig
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix = '.debug'
            manifestPlaceholders = ['QQ_KEY': 'adf', 'WEXIN_KEY': 'adfaf']
//            signingConfig signingConfigs.debugSigningConfig
        }
    }
    lintOptions {
//        abortOnError false
    }



    sourceSets {
        main.java.srcDirs += ["src/main/kotlin"]
        main.java.srcDirs += ["src/animationsExprimental/java"]
        main.res.srcDirs += ["src/animationsExprimental/res"]
        main.res.srcDirs += ["src/animationsExprimental/res-frame-animation"]
        main.manifest.srcFile "src/animationsExprimental/AndroidManifest.xml"
        main.assets.srcDirs += ["src/animationsExprimental/assets"]

    }

//    useLibrary 'android.test.runner'
//    useLibrary 'android.test.base'
//    useLibrary 'android.test.mock'
    dataBinding {
        enabled = true
    }

}



dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(path: ':client/location')
    implementation project(path: ':client/chatroom')
    implementation project(path: ':client/network')
//    implementation project(path: ':mockserver')
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0-alpha01'
    annotationProcessor "com.google.dagger:dagger-compiler:${rootProject.ext.daggerVersion}"
//    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    annotationProcessor 'androidx.room:room-compiler:2.1.0-alpha03'

    // Dependencies for local unit tests
    testImplementation "junit:junit:${rootProject.ext.junitVersion}"
    testImplementation "org.mockito:mockito-all:1.10.19"
    testImplementation "org.mockito:mockito-core:${rootProject.ext.mockitoVersion}"
    testImplementation "org.mockito:mockito-inline:${rootProject.ext.mockitoVersion}"
    testImplementation "org.hamcrest:hamcrest-all:${rootProject.ext.hamcrestVersion}"

    // Espresso dependencies
    androidTestImplementation "androidx.test.espresso:espresso-core:3.1.1"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:3.1.1"
    androidTestImplementation "androidx.test.espresso:espresso-intents:3.1.1"
    androidTestImplementation "androidx.test.espresso:espresso-accessibility:3.1.1"
    androidTestImplementation "androidx.test.espresso:espresso-web:3.1.1"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:3.1.1"
    // The following Espresso dependency can be either "implementation"
    // or "androidTestImplementation", depending on whether you want the
    // dependency to appear on your APK's compile classpath or the test APK
    // classpath.
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:3.1.1"

    // Dependencies for Android unit tests
    androidTestImplementation "junit:junit:${rootProject.ext.junitVersion}"
    androidTestImplementation "org.mockito:mockito-android:${rootProject.ext.mockitoVersion}"
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'

    // Android Testing Support Library's runner and rules
    androidTestImplementation "androidx.test:runner:1.1.1"
    androidTestImplementation "androidx.test:rules:1.1.1"

//    androidTestImplementation 'androidx.test:monitor:1.1.0'
//    androidTestImplementation 'androidx.multidex:multidex-instrumentation:2.0.0',{
//        exclude group: 'com.android.support', module: 'multidex'
//    }

}
println("app end")
