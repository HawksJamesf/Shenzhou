println("app start")
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: "kotlin-android-extensions"
//apply plugin: 'kotlin-kapt'

apply plugin: 'realm-android'

apply plugin: 'versionplugin'
//apply plugin: com.hawksjamesf.plugin.VersionPluginForJava
apply plugin: 'versionpluginforjava'
apply plugin: 'versionpluginforkotlin'


versionPlugin {
    buildTypeMatcher = 'debug'
//        '$appName/project/buildType-v_$versionName-c_$versionCode'
//        fileFormat = '$appName-v_$versionName-c_$versionCode'
    fileFormat = '$project-$appName-$buildType-v_$versionName-c_$versionCode-time_$releaseTime'
}

versionPluginForJava {
    buildTypeMatcher = "debug"
    fileFormat = '$project-$appName-$buildType-v_$versionName-c_$versionCode-time_$releaseTime'
}


versionPluginForKotlin {
    buildTypeMatcher = "debug"
    fileFormat = '$project-$appName-$buildType-v_$versionName-c_$versionCode-time_$releaseTime'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName


        multiDexEnabled = true
        applicationId "com.hawksjamesf.simpleweather"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
//             设置支持的SO库架构
            abiFilters 'x86_64'
            abiFilters 'x86'
            abiFilters 'armeabi-v7a'
            abiFilters 'arm64-v8a'
        }
//        buildConfigField("String", "WEATHER_URL_XIAO_MI", '"https://weatherapi.market.xiaomi.com"')
//        buildConfigField("String", "WEATHER_URL_CAI_YUN_APP", '"https://api.caiyunapp.com"')
//        buildConfigField('String', 'WEATHER_URL_OPEN_WEATHER_MAP', '"https://api.openweathermap.org"')
        buildConfigField('String', 'WEATHER_APP_ID', '"fb306d52c9aaff4a1ae20fbe8aa38afb"')
        buildConfigField('String', 'BUGLY_APP_ID', '"a5f4e5063e"')
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
        }
    }
    lintOptions {
//        abortOnError false
    }

    flavorDimensions('data_access')
    productFlavors {

        mocked {
            dimension 'data_access'
            buildConfigField 'boolean', 'MOCKED_DATA_ACCESS', 'true'
            buildConfigField 'String', 'WEATHER_URL', '" "'
        }
//        real{
//            dimension 'data_access'
//            buildConfigField 'boolean','MOCKED_DATA_ACCESS','false'
//            buildConfigField 'String','WEATHER_URL','"https://api.openweathermap.org"'
//
//        }
//
//        realLocalServer{
//            dimension 'data_access'
//            buildConfigField 'boolean','MOCKED_DATA_ACCESS','false'
//            buildConfigField 'String','WEATHER_URL',"\"http://${getLocalIP()}:8080\""
//        }

    }

    sourceSets {
        main.java.srcDirs += ["src/main/kotlin"]
    }

//    useLibrary 'android.test.runner'
//    useLibrary 'android.test.base'
//    useLibrary 'android.test.mock'

}

static String getLocalIP() {
    InetAddress result = null
    Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces()
    while (interfaces.hasMoreElements()) {
        Enumeration<InetAddress> addresses = interfaces.nextElement().getInetAddresses()
        while (addresses.hasMoreElements()) {
            InetAddress address = addresses.nextElement()
            if (!address.isLoopbackAddress()) {
                if (address.isSiteLocalAddress()) {
                    return address.getHostAddress()
                } else if (result == null) {
                    result = address
                }
            }
        }
    }
    return (result != null ? result : InetAddress.getLocalHost()).getHostAddress()
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(path: ':location')
//    implementation project(path: ':mockserver')
    annotationProcessor "com.google.dagger:dagger-compiler:${rootProject.ext.daggerVersion}"
//    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    annotationProcessor 'androidx.room:room-compiler:2.1.0-alpha01'

    // Dependencies for local unit tests
    testImplementation "junit:junit:${rootProject.ext.junitVersion}"
    testImplementation "org.mockito:mockito-all:1.10.19"
    testImplementation "org.mockito:mockito-core:${rootProject.ext.mockitoVersion}"
    testImplementation "org.mockito:mockito-inline:${rootProject.ext.mockitoVersion}"
    testImplementation "org.hamcrest:hamcrest-all:${rootProject.ext.hamcrestVersion}"

    // Espresso dependencies
    androidTestImplementation "androidx.test.espresso:espresso-core:3.1.0"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:3.1.0"
    androidTestImplementation "androidx.test.espresso:espresso-intents:3.1.0"
    androidTestImplementation "androidx.test.espresso:espresso-accessibility:3.1.0"
    androidTestImplementation "androidx.test.espresso:espresso-web:3.1.0"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:3.1.0"
    // The following Espresso dependency can be either "implementation"
    // or "androidTestImplementation", depending on whether you want the
    // dependency to appear on your APK's compile classpath or the test APK
    // classpath.
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:3.1.0"

    // Dependencies for Android unit tests
    androidTestImplementation "junit:junit:${rootProject.ext.junitVersion}"
    androidTestImplementation "org.mockito:mockito-android:${rootProject.ext.mockitoVersion}"
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'

    // Android Testing Support Library's runner and rules
    androidTestImplementation "androidx.test:runner:1.1.0"
    androidTestImplementation "androidx.test:rules:1.1.0"



//    androidTestImplementation 'androidx.test:monitor:1.1.0'
//    androidTestImplementation 'androidx.multidex:multidex-instrumentation:2.0.0',{
//        exclude group: 'com.android.support', module: 'multidex'
//    }

}
println("app end")
